'''
Runtime: 1011 ms, faster than 87.93% of Python online submissions for Coin Change.
Memory Usage: 14.4 MB, less than 20.03% of Python online submissions for Coin Change.
'''
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int], length m
        :type amount: int, length n
        :rtype: int
        """
        n = len(coins)
        if n == 1:
            return amount//coins[0] if amount%coins[0]==0 else -1
        amount+=1
        m = 10**4+1
        dp=[0]
        dp +=[m for i in range(1,amount)]#O(n)
        coins.sort()#O(mlog(m))
        coins = coins[:self.b(coins,amount, n)]#O(1)
        
        for x in coins:#O(m)
            mod = x
            dp[x]=1
            for r in range(x+1,amount):#O(n)
                if mod==r:
                    mod+=x
                    dp[r]=dp[r-x]+1
                    continue
                if dp[r-x]!=m:
                    dp[r]=min(dp[r-x]+1,dp[r])
                    
        return dp[-1] if dp[-1] != m else -1#time:O(nm),space:O(n)
    
    def b(self, arr, v,k):#O(log(n))
        l,r = 0,k-1
        while l<=r:
            mid = l+(r-l)/2
            if arr[mid]==v:
                return mid
            elif arr[mid]>v:
                r=mid-1
            else:
                l=mid+1
        return l
